# ========================= week 2 ==========================

#  https://kafka.apache.org/documentation/#operations
# make sure the Kafka is up, not if follow the instructions in instructions.txt in common/src/main/resources/instruction.txt

# log into docker kafka-broker1 container
docker exec -it kafka-broker1 bash

# Create a Kafka topic using command line or Kafdrop
kafka-topics.sh --create --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 \
                --topic streaming.week2.tweets \
                --partitions 3 \
                --replication-factor 2

# list topics - should see three partitions for topic streaming.week2.tweets
kafka-topics.sh --zookeeper zookeeper:2181 --list

# if you ever would like to delete a topic to restart from scratch
kafka-topics.sh --delete --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094  --topic <topic name>

# describe a topic to see # of partitions and replicas
kafka-topics.sh --zookeeper zookeeper:2181 --topic streaming.week2.tweets --describe

# run the KafkaTweetProducer in the editor to produce tweets to topic - streaming.week2.tweets

# consume tweets and display in the console
kafka-console-consumer.sh --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 \
    --topic streaming.week2.tweets \
    --from-beginning \
    --formatter kafka.tools.DefaultMessageFormatter \
    --property print.key=true \
    --property print.value=true \
    --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer \
    --property value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# reset partition off set to the earliest for consumer group id "streamingcourse.week2.kafkamessaging.KafkaSimpleTweetConsumer"
kafka-consumer-groups.sh --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 \
 --execute --reset-offsets \
 --group streamingcourse.week2.kafkamessaging.KafkaSimpleTweetConsumer \
 --topic streaming.week2.tweets \
 --to-earliest

# can confirm using the kafka drop UI, the Consumer Offset column should contain 0 for each partition
http://localhost:9000/consumer/streamingcourse.week2.kafkamessaging.KafkaSimpleTweetConsumer

# reset partition off set to the earliest for consumer group id "streamingcourse.week2.kafkamessaging.KafkaConsumerGroupTweetConsumer"
kafka-consumer-groups.sh --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 \
  --execute --reset-offsets \
  --group streamingcourse.week2.kafkamessaging.KafkaConsumerGroupTweetConsumer \
  --topic streaming.week2.tweets \
  --to-earliest


# can confirm using the kafka drop UI, the Consumer Offset column should contain 0 for each partition
http://localhost:9000/consumer/streamingcourse.week2.kafkamessaging.KafkaConsumerGroupTweetConsumer


# =============================================================================
# Command to clean up states when things went haywire
# =============================================================================

# reset the internal state of a Kafka Streams application
# https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Streams+Application+Reset+Tool
# if you see the following error while running the command line, just run it again
# "Make sure to stop all running application instances before running the reset tool
kafka-streams-application-reset.sh --application-id <application id> \
            --bootstrap-servers kafka1:29092,kafka2:29093,kafka3:29094 \
            --input-topics <topic name>


# when encountered an error "Tried to lookup lag for unknown task 1_0"
# run this command on the machine that runs the Kafka Streams application
# remove /private/tmp/kafka-streams/kstreams-wordcount-app directory
* rm -r /private/tmp/kafka-streams/kstreams-wordcount-app

